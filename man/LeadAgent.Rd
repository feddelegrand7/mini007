% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{LeadAgent}
\alias{LeadAgent}
\title{LeadAgent: A Multi-Agent Orchestration Coordinator}
\description{
`LeadAgent` extends `Agent` to coordinate a group of specialized agents.
It decomposes complex prompts into subtasks using LLMs and assigns each subtask to the most suitable registered agent.
The lead agent handles response chaining, where each agent can consider prior results.
}
\details{
This class builds intelligent multi-agent workflows by delegating sub-tasks using `delegate_prompt()`,
executing them with `invoke()`, and storing the results in the `agents_interaction` list.
}
\examples{

## ------------------------------------------------
## Method `LeadAgent$invoke`
## ------------------------------------------------

\dontrun{
lead <- LeadAgent$new("lead", "gpt-4.1-mini")
lead$register_agents(list(agent1, agent2))
result <- lead$invoke("Summarize a topic and translate to German.")
}
}
\section{Super class}{
\code{\link[mini007:Agent]{mini007::Agent}} -> \code{LeadAgent}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{agents}}{A named list of registered sub-agents (by UUID).}

\item{\code{agents_interaction}}{A list of delegated task history with agent IDs, prompts, and responses.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LeadAgent-new}{\code{LeadAgent$new()}}
\item \href{#method-LeadAgent-register_agents}{\code{LeadAgent$register_agents()}}
\item \href{#method-LeadAgent-delegate_prompt}{\code{LeadAgent$delegate_prompt()}}
\item \href{#method-LeadAgent-invoke}{\code{LeadAgent$invoke()}}
\item \href{#method-LeadAgent-clone}{\code{LeadAgent$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LeadAgent-new"></a>}}
\if{latex}{\out{\hypertarget{method-LeadAgent-new}{}}}
\subsection{Method \code{new()}}{
Initializes the LeadAgent with a built-in task-decomposition prompt.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LeadAgent$new(name, llm_object)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A short name for the coordinator (e.g. `"lead"`).}

\item{\code{llm_object}}{The LLM object generate by ellmer (eg. output of ellmer::chat_openai)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LeadAgent-register_agents"></a>}}
\if{latex}{\out{\hypertarget{method-LeadAgent-register_agents}{}}}
\subsection{Method \code{register_agents()}}{
Register one or more agents for delegation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LeadAgent$register_agents(agents)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{agents}}{A vector of `Agent` objects to register.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LeadAgent-delegate_prompt"></a>}}
\if{latex}{\out{\hypertarget{method-LeadAgent-delegate_prompt}{}}}
\subsection{Method \code{delegate_prompt()}}{
Returns a list of subtasks with assigned agent IDs and names.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LeadAgent$delegate_prompt(prompt)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prompt}}{A complex instruction to be broken into subtasks.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of lists, each with `agent_id`, `agent_name`, and `prompt` fields.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LeadAgent-invoke"></a>}}
\if{latex}{\out{\hypertarget{method-LeadAgent-invoke}{}}}
\subsection{Method \code{invoke()}}{
Executes the full prompt pipeline: decomposition → delegation → invocation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LeadAgent$invoke(prompt)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prompt}}{The complex user instruction to process.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The final response (from the last agent in the sequence).
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
lead <- LeadAgent$new("lead", "gpt-4.1-mini")
lead$register_agents(list(agent1, agent2))
result <- lead$invoke("Summarize a topic and translate to German.")
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LeadAgent-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LeadAgent-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LeadAgent$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
